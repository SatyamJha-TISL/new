[{"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\index.js":"1","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\App.js":"2","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\reportWebVitals.js":"3","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\Player.js":"4","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\Song.js":"5","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\util.js":"6","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\Library.js":"7","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\LibrarySong.js":"8"},{"size":323,"mtime":1611492425962,"results":"9","hashOfConfig":"10"},{"size":1660,"mtime":1611892887878,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":499162500000,"results":"12","hashOfConfig":"10"},{"size":3647,"mtime":1611897949749,"results":"13","hashOfConfig":"10"},{"size":304,"mtime":1611579700719,"results":"14","hashOfConfig":"10"},{"size":2393,"mtime":1611552736615,"results":"15","hashOfConfig":"10"},{"size":686,"mtime":1611686616111,"results":"16","hashOfConfig":"10"},{"size":1524,"mtime":1611894769664,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"20","usedDeprecatedRules":"21"},"1al13xb",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"21"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\index.js",["38","39"],"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport {FontAwesomrIcon } from '@fortawesome/react-fontawesome';\nimport {faPlay ,} from '@fortawesome/fontawesome-svg-core'\nReactDOM.render(\n  <React.StrictMode>\n    <App /> \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n  ",["40","41"],"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\App.js",[],"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\reportWebVitals.js",[],["42","43"],"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\Player.js",["44"],"import React, { useEffect } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faPlay,\r\n  faAngleLeft,\r\n  faAngleRight,\r\n  faPause,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst Player = ({\r\n  currentSong,\r\n  isPlaying,\r\n  songs,\r\n  setSongs,\r\n  setCurrentSong,\r\n  setisPlaying,\r\n  audioRef,\r\n  songInfo,\r\n  setsongInfo,\r\n}) => {\r\n  \r\n  // run the updateBackground function whenever current song gets updated //\r\n  // skip-back and skip forward par click krne pr mera current song update hota h . \r\n  // so jab bhi naya song mile to uska background bhi change hona chahiye \r\n  // isi k liye useEffect ka use kiye h taki jab bhi current song update ho to uska background bhi change ho jae\r\n\r\n  useEffect(() => {\r\n\r\n    const updateBackground = songs.map((song) => {\r\n\r\n      if (song.id === currentSong.id) {\r\n        return { ...song, active: true };\r\n\r\n      } \r\n      \r\n      else {\r\n        return { ...song, active: false };\r\n      }\r\n\r\n    });\r\n\r\n    setSongs(updateBackground);\r\n  }, [currentSong]);\r\n\r\n\r\n  const playHandler = () => {\r\n\r\n    if (isPlaying) {              // agar chal rha to click krne pr pause kr do \r\n      audioRef.current.pause();\r\n    }     \r\n    else {\r\n      audioRef.current.play();\r\n    }\r\n    setisPlaying(!isPlaying);\r\n\r\n  };\r\n\r\n  // Updating the current time and the duration of the song //\r\n  // Actually currentTime and duration are attributes of audio tag\r\n  // I got confused cuz here I named the state values of songInfo also  as currentTime and duration\r\n\r\n  // setting the initial and final values of music player time //\r\n\r\n  const convertTime = (time) => {\r\n    return (\r\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2)\r\n    );\r\n  };\r\n\r\n  //  setting the dragging of input slider //\r\n\r\n  const dragHandler = (e) => {\r\n    audioRef.current.currentTime = e.target.value;\r\n    setsongInfo({ ...songInfo, currentTime: e.target.value });\r\n  };\r\n\r\n  // skip song forward or backward //\r\n\r\n  // song ka hmko index find krna h using \".findIndex\" and \r\n  //fir us song ko skip krne k liye \"(currentIndex + 1) % songs.length\" method usE kr liye \r\n\r\n\r\n  const skipSongHandler = (direction) => {\r\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\r\n    if (direction === \"skip-forward\") {\r\n      setCurrentSong(songs[(currentIndex + 1) % songs.length]);\r\n    }\r\n\r\n    if (direction === \"skip-back\") {\r\n      if ((currentIndex - 1) % songs.length === -1) {\r\n        setCurrentSong(songs[songs.length - 1]);\r\n      }\r\n      setCurrentSong(songs[(currentIndex - 1) % songs.length]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"player\">\r\n      <div className=\"time-control\">\r\n        <p>{convertTime(songInfo.currentTime)}</p>\r\n\r\n        <input\r\n          min={0}\r\n          max={songInfo.duration}\r\n          value={songInfo.currentTime}\r\n          onChange={dragHandler}\r\n          type=\"range\"\r\n        />\r\n\r\n        <p> {convertTime(songInfo.duration)} </p>\r\n      </div>\r\n\r\n      <div className=\"play-control\">\r\n        <FontAwesomeIcon\r\n          className=\"skip-back\"\r\n          size=\"2x\"\r\n          icon={faAngleLeft}\r\n          onClick={() => skipSongHandler(\"skip-back\")}\r\n        />\r\n        <FontAwesomeIcon\r\n          onClick={playHandler}\r\n          className=\"play\"\r\n          size=\"2x\"\r\n          icon={isPlaying ? faPause : faPlay}\r\n        />\r\n        <FontAwesomeIcon\r\n          className=\"skip-forward\"\r\n          size=\"2x\"\r\n          icon={faAngleRight}\r\n          onClick={() => skipSongHandler(\"skip-forward\")}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Player;\r\n","C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\Song.js",[],"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\util.js",[],"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\Library.js",[],"C:\\Users\\lenovo\\Desktop\\Dev Sat\\my-app\\src\\components\\LibrarySong.js",[],{"ruleId":"45","severity":1,"message":"46","line":4,"column":9,"nodeType":"47","messageId":"48","endLine":4,"endColumn":24},{"ruleId":"45","severity":1,"message":"49","line":5,"column":9,"nodeType":"47","messageId":"48","endLine":5,"endColumn":15},{"ruleId":"50","replacedBy":"51"},{"ruleId":"52","replacedBy":"53"},{"ruleId":"50","replacedBy":"54"},{"ruleId":"52","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":43,"column":6,"nodeType":"58","endLine":43,"endColumn":19,"suggestions":"59"},"no-unused-vars","'FontAwesomrIcon' is defined but never used.","Identifier","unusedVar","'faPlay' is defined but never used.","no-native-reassign",["60"],"no-negated-in-lhs",["61"],["60"],["61"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'setSongs' and 'songs'. Either include them or remove the dependency array. If 'setSongs' changes too often, find the parent component that defines it and wrap that definition in useCallback.","ArrayExpression",["62"],"no-global-assign","no-unsafe-negation",{"desc":"63","fix":"64"},"Update the dependencies array to be: [currentSong, setSongs, songs]",{"range":"65","text":"66"},[1041,1054],"[currentSong, setSongs, songs]"]